#include <iostream>
using namespace std;

struct TRAIN{ // структура поезд
    char *NAZN = " "; // переменная для пункта назначения
    int NUMR = 0; // переменная для номера поезда
    char *TIME = " "; // переменная для времени отправления
    TRAIN() // конструктор без параметров
    {
        char *_NAZN = new char[128];
        int _NUMR = 0;
        char *_TIME = new char[4];
        cout << "Введите номер поезда" << endl;
        cin >> _NUMR;
        cout << "Введите пункт назначения" << endl;
        cin >> _NAZN;
        cout << "Введите время отправления (одим числом, без разделительных знаков, например 19:45 -> 1945)" << endl;
        cin >> _TIME;
        TIME = _TIME;  // вводим с клавиатуры данные и записываем их в поля объекта
        NAZN = _NAZN;
        NUMR = _NUMR;
    }
    void printTrain(); // объявляем функцию вывода данных о поезде на экран
};

void TRAIN::printTrain() // инициализируем функци вывода данных о поезде н экран
{
    cout << "Номер поезда: " << NUMR << endl;
    cout << "Пункт назначения: " << NAZN << endl;
    cout << "Время отправления: " << TIME[0] << TIME[1]<< ":" << TIME[2] << TIME[3] << endl; // выводим время в удобном формате
    cout << "________________________________" << endl; // просто разделяющая черта (для удобного визуального вопсприятия)
}

int main() {
    setlocale(LC_ALL, "Russian"); // локализация
    int const n = 8; // константа для 8 объектов
    int timeNow = 0; // переменная для считывания нужного времени с клавиатуры
    TRAIN* rasp[n]; // создаем указатель на массив объектов (поезда)
    bool isFound = false; // логическая переменная найдены поезда/не найдены
    for (int i = 0; i < n; i++) // цикл инициализирует объекты (вводим все данные с клавиатуры)
    {
       rasp[i] = new TRAIN(); // обращаемся к конструктору
    }
    cout << "Введите время (одим числом, без разделительных знаков, например 19:45 -> 1945)" << endl;
    cin >> timeNow; // считываем нужное время
    for (int i = 0; i < n; i++) // цикл пробегается по всем объектам и проверяет время отправления каждого поезда на подходящее условие
    {
        int buf = atoi(rasp[i]->TIME); // с помощью стандартной функции "atoi" переводим время из строкового формата в число int 
        if (buf > timeNow) // сравниваем два числа
        {
            rasp[i]->printTrain(); // если время отправления поезда позже, чем введенное время, то выводим данные о поезде на экран
            isFound = true; // найдены
        }
    }
    if (!isFound) // если таких поездов не было найдено
        cout << "Таких поездов не найдено" << endl; // то выводим соотвествуещее сообщение на экран
    system("pause"); // системная пауза (чтобы не закрывалось окно сразу)
    return 0;
}
